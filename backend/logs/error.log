{"date":"2023-05-02T05:40:35.982Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-02T05:40:35.987Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-02T05:47:44.408Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-02T05:47:44.410Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-02T05:49:51.637Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-02T05:49:51.643Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-02T05:50:33.891Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-02T05:50:33.906Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-02T05:50:57.020Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-02T05:51:10.285Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-02T05:51:10.295Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-02T05:55:01.529Z","level":"error","message":"Password must contain atleast one uppercase letter, one special character and one number","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-02T05:55:19.948Z","level":"error","message":"Password must contain atleast one uppercase letter, one special character and one number","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-02T05:55:31.419Z","level":"error","message":"Password must contain atleast one uppercase letter, one special character and one number","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-02T05:55:49.102Z","level":"error","message":"Password must contain atleast one uppercase letter, one special character and one number","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-02T05:55:59.412Z","level":"error","message":"user validation failed: username: Path `username` (``) is shorter than the minimum allowed length (3).","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-02T06:11:37.258Z","level":"error","message":"Password must contain atleast one uppercase letter, one special character and one number","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-02T07:50:17.013Z","level":"error","message":"Post validation failed: purchaseFirst: Cast to Boolean failed for value \"https:/link\" (type string) at path \"purchaseFirst\" because of \"CastError\", comission: `undefined` is not a valid enum value for path `comission`., type: `undefined` is not a valid enum value for path `type`.","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-02T09:20:06.552Z","level":"error","message":"Schema hasn't been registered for model \"User\".\nUse mongoose.model(name, schema)","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-02T09:20:13.099Z","level":"error","message":"Schema hasn't been registered for model \"User\".\nUse mongoose.model(name, schema)","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-02T09:21:59.714Z","level":"error","message":"livePosts.select is not a function","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-02T09:28:18.600Z","level":"error","message":"livePosts.select is not a function","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-02T09:28:46.323Z","level":"error","message":"livePosts.select is not a function","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-02T11:47:00.248Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-02T11:47:00.254Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-02T11:47:11.977Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-02T11:47:11.979Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-02T11:47:19.762Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-02T11:47:19.764Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-02T11:47:35.310Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-02T11:47:35.316Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-03T06:41:39.530Z","level":"error","message":"E11000 duplicate key error collection: post_draft.users index: username_1 dup key: { username: null }","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-03T06:42:24.229Z","level":"error","message":"E11000 duplicate key error collection: post_draft.users index: username_1 dup key: { username: null }","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-03T06:45:39.761Z","level":"error","message":"E11000 duplicate key error collection: post_draft.users index: username_1 dup key: { username: null }","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-03T06:47:05.167Z","level":"error","message":"Password must contain atleast one uppercase letter, one special character and one number","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-03T06:50:11.036Z","level":"error","message":"E11000 duplicate key error collection: post_draft.users index: username_1 dup key: { username: null }","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-03T06:50:40.804Z","level":"error","message":"E11000 duplicate key error collection: post_draft.users index: username_1 dup key: { username: null }","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-03T06:51:43.983Z","level":"error","message":"Cannot read properties of null (reading 'getJWTToken')","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-03T06:52:22.194Z","level":"error","message":"User already exists","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-03T07:46:50.279Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-03T07:55:51.989Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-03T10:26:26.892Z","level":"error","message":"Report validation failed: post: Path `post` is required.","method":"POST","service":"user-service","url":"/report"}
{"date":"2023-05-03T11:24:00.787Z","level":"error","message":"Unexpected token h in JSON at position 0","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-03T12:25:56.458Z","level":"error","message":"Cannot read properties of undefined (reading 'path')","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-03T12:27:16.115Z","level":"error","message":"Cannot read properties of undefined (reading 'path')","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-03T12:27:45.437Z","level":"error","message":"Cannot read properties of undefined (reading 'path')","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-03T12:28:00.530Z","level":"error","message":"Unexpected token a in JSON at position 1","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-03T12:28:44.729Z","level":"error","message":"Unexpected token a in JSON at position 1","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-03T12:45:12.986Z","level":"error","message":"Unexpected token a in JSON at position 1","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-03T12:49:41.733Z","level":"error","message":"Unexpected token a in JSON at position 1","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-03T13:06:19.756Z","level":"error","message":"Schema hasn't been registered for model \"comment\".\nUse mongoose.model(name, schema)","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-03T13:06:20.780Z","level":"error","message":"Schema hasn't been registered for model \"comment\".\nUse mongoose.model(name, schema)","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-03T13:06:24.461Z","level":"error","message":"Schema hasn't been registered for model \"comment\".\nUse mongoose.model(name, schema)","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-03T13:06:24.589Z","level":"error","message":"Schema hasn't been registered for model \"comment\".\nUse mongoose.model(name, schema)","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-03T13:07:54.096Z","level":"error","message":"Cannot populate path `comments.user` because it is not in your schema. Set the `strictPopulate` option to false to override.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-03T13:07:55.120Z","level":"error","message":"Cannot populate path `comments.user` because it is not in your schema. Set the `strictPopulate` option to false to override.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-03T13:08:26.037Z","level":"error","message":"Schema hasn't been registered for model \"User\".\nUse mongoose.model(name, schema)","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-03T13:08:27.057Z","level":"error","message":"Schema hasn't been registered for model \"User\".\nUse mongoose.model(name, schema)","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-03T13:08:41.010Z","level":"error","message":"Cannot populate path `User` because it is not in your schema. Set the `strictPopulate` option to false to override.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-03T13:08:42.330Z","level":"error","message":"Cannot populate path `User` because it is not in your schema. Set the `strictPopulate` option to false to override.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T10:11:41.660Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T10:11:41.666Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T10:39:53.309Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T10:39:53.313Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T10:46:08.877Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T10:46:08.889Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T10:46:28.925Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T10:46:28.929Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T10:47:41.221Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-04T10:47:41.229Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-04T10:49:30.948Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-04T10:49:30.950Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-04T10:50:50.172Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-04T10:50:50.173Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-04T10:50:57.785Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-04T10:50:57.787Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-04T11:40:51.267Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T11:40:51.272Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T11:41:22.338Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T11:41:22.357Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T11:41:39.687Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T11:41:39.699Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T11:44:32.751Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T11:44:32.800Z","level":"error","message":"User not premium","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T12:01:38.604Z","level":"error","message":"Cast to string failed for value \"{\n  searchFilter: null,\n  countryFilter: null,\n  tagsFilter: [],\n  rangeFilter: [],\n  commissionState: '',\n  typeState: '',\n  purchaseFirst: false\n}\" (type Object) at path \"title\" for model \"Post\"","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T12:01:48.600Z","level":"error","message":"Cast to string failed for value \"{\n  searchFilter: null,\n  countryFilter: null,\n  tagsFilter: [],\n  rangeFilter: [],\n  commissionState: '',\n  typeState: '',\n  purchaseFirst: false\n}\" (type Object) at path \"title\" for model \"Post\"","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-04T12:01:48.601Z","level":"error","message":"Cast to string failed for value \"{\n  searchFilter: null,\n  countryFilter: null,\n  tagsFilter: [],\n  rangeFilter: [],\n  commissionState: '',\n  typeState: '',\n  purchaseFirst: false\n}\" (type Object) at path \"title\" for model \"Post\"","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-05T06:40:09.834Z","level":"error","message":"Unexpected token u in JSON at position 0","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-05T06:49:05.616Z","level":"error","message":"Unexpected token u in JSON at position 0","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-05T06:50:56.814Z","level":"error","message":"Post validation failed: price: Path `price` is required.","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-05T06:58:26.753Z","level":"error","message":"Unexpected token u in JSON at position 0","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-05T13:15:23.248Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-05T13:18:18.219Z","level":"error","message":"Password must be 6 characters long","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-05-05T13:21:19.174Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-05T13:21:19.180Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-05T13:21:38.084Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-05T13:21:38.086Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-08T12:58:30.737Z","level":"error","message":"Post validation failed: comission: Cast to string failed for value \"[ 'cash' ]\" (type Array) at path \"comission\"","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-08T13:11:34.234Z","level":"error","message":"Post validation failed: comission.0: `cash,reward` is not a valid enum value for path `comission.0`.","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-08T13:13:22.338Z","level":"error","message":"Post validation failed: comission.0: `[\"cash\",\"reward\"]` is not a valid enum value for path `comission.0`.","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-08T13:14:23.751Z","level":"error","message":"Unexpected token , in JSON at position 19","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-08T13:14:58.849Z","level":"error","message":"Unexpected token c in JSON at position 0","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-09T12:33:28.637Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:33:28.646Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:33:28.876Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:33:28.879Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:33:29.781Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:33:29.834Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:34:52.911Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:34:53.051Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:34:53.253Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:34:53.784Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:34:54.027Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:34:54.343Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:34:54.693Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:37:56.825Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:37:56.966Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:37:56.971Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:37:57.032Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:37:57.095Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:37:57.441Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:37:58.239Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:37:58.296Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:37:58.947Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:37:59.068Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:37:59.204Z","level":"error","message":"Can't use $toLower with Array.","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-09T12:44:23.765Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-09T12:44:23.773Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-09T12:44:32.853Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-09T12:44:32.856Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-09T12:44:35.517Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-09T12:44:35.520Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-09T12:44:44.859Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-09T12:44:44.861Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-09T12:56:21.076Z","level":"error","message":"Unexpected token u in JSON at position 0","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-09T12:56:30.865Z","level":"error","message":"Unexpected token u in JSON at position 0","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-09T12:57:33.428Z","level":"error","message":"Unexpected token u in JSON at position 0","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-09T12:57:49.951Z","level":"error","message":"Unexpected token u in JSON at position 0","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-09T12:58:43.435Z","level":"error","message":"Unexpected token u in JSON at position 0","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-09T12:58:53.826Z","level":"error","message":"Unexpected token u in JSON at position 0","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-09T13:00:43.548Z","level":"error","message":"Unexpected token u in JSON at position 0","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-09T13:02:09.311Z","level":"error","message":"Unexpected token u in JSON at position 0","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-05-09T13:27:13.864Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-09T13:27:13.873Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-09T13:27:22.409Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-09T13:27:22.411Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-09T13:27:27.213Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-05-09T13:27:27.214Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype],\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 20,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-05-11T11:59:07.820Z","level":"error","message":"Cannot read properties of undefined (reading 'premium')","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-05-11T16:46:09.207Z","level":"error","message":"Cast to string failed for value \"[ 'reward' ]\" (type Array) at path \"comission\" for model \"Post\"","method":"POST","service":"user-service","url":"/fetch"}
{"date":"2023-09-03T11:08:21.681Z","level":"error","message":"Password must be 6 characters long","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-03T11:08:58.929Z","level":"error","message":"Could not connect to any servers in your MongoDB Atlas cluster. One common reason is that you're trying to access the database from an IP that isn't whitelisted. Make sure your current IP address is on your Atlas cluster's IP whitelist: https://www.mongodb.com/docs/atlas/security-whitelist/","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-03T11:11:19.549Z","level":"error","message":"Could not connect to any servers in your MongoDB Atlas cluster. One common reason is that you're trying to access the database from an IP that isn't whitelisted. Make sure your current IP address is on your Atlas cluster's IP whitelist: https://www.mongodb.com/docs/atlas/security-whitelist/","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-03T11:14:24.097Z","level":"error","message":"Could not connect to any servers in your MongoDB Atlas cluster. One common reason is that you're trying to access the database from an IP that isn't whitelisted. Make sure your current IP address is on your Atlas cluster's IP whitelist: https://www.mongodb.com/docs/atlas/security-whitelist/","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-03T20:14:04.411Z","level":"error","message":"Cannot read properties of null (reading '_id')","method":"GET","service":"user-service","url":"/profile/get"}
{"date":"2023-09-03T20:16:02.596Z","level":"error","message":"Cannot read properties of null (reading '_id')","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-09-03T20:16:08.753Z","level":"error","message":"Cannot read properties of null (reading '_id')","method":"POST","service":"user-service","url":"/create"}
{"date":"2023-09-03T20:16:34.604Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-03T20:44:06.335Z","level":"error","message":"Post not found","method":"GET","service":"user-service","url":"/fetch/64f4e73a9e12616ce5f5400b"}
{"date":"2023-09-03T20:44:13.035Z","level":"error","message":"Post not found","method":"GET","service":"user-service","url":"/fetch/64f47d340448f07a7f90ce23"}
{"date":"2023-09-08T19:30:24.732Z","level":"error","message":"Cannot read properties of null (reading '_id')","method":"GET","service":"user-service","url":"/profile/get"}
{"date":"2023-09-08T19:42:20.918Z","level":"error","message":"Cannot read properties of null (reading '_id')","method":"GET","service":"user-service","url":"/profile/get"}
{"date":"2023-09-08T19:42:20.931Z","level":"error","message":"Cannot read properties of null (reading '_id')","method":"GET","service":"user-service","url":"/profile/get"}
{"date":"2023-09-08T19:42:58.967Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-08T21:46:14.896Z","level":"error","message":"Cannot read properties of null (reading '_id')","method":"GET","service":"user-service","url":"/profile/get"}
{"date":"2023-09-11T19:22:47.584Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-14T23:27:54.836Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-14T23:41:02.560Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-09-14T23:41:02.594Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  joinDuplicateHeaders: undefined,\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 32,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-14T23:41:11.202Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-09-14T23:41:11.209Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  joinDuplicateHeaders: undefined,\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 32,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-14T23:41:29.451Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-09-14T23:41:29.453Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  joinDuplicateHeaders: undefined,\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 32,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-14T23:41:38.475Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-09-14T23:41:38.479Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  joinDuplicateHeaders: undefined,\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 32,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-14T23:41:46.706Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-09-14T23:41:46.708Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  joinDuplicateHeaders: undefined,\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 32,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-14T23:41:48.474Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-09-14T23:41:48.476Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  joinDuplicateHeaders: undefined,\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 32,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-14T23:45:18.635Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-14T23:50:23.418Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:17:40.434Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:17:49.641Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:18:09.334Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:18:46.462Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-24T08:20:07.348Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:20:16.264Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:21:15.279Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:21:22.057Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:27:25.614Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:27:37.862Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:27:55.813Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:27:57.011Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:27:57.342Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:28:06.807Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T08:31:08.027Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T19:41:40.446Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T19:42:25.335Z","level":"error","message":"User already exists","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-24T19:54:33.031Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T19:54:37.147Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T19:55:06.505Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T19:55:27.702Z","level":"error","message":"Password must be 6 characters long","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-24T20:05:08.263Z","level":"error","message":"bcrypt is not defined","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-24T20:06:16.715Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T20:11:15.578Z","level":"error","message":"compare is not defined","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T20:12:37.137Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T20:13:06.521Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-24T20:15:21.347Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T20:16:00.458Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T20:16:41.482Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T20:17:37.282Z","level":"error","message":"bcrypt is not defined","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-24T20:24:09.941Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-09-24T20:24:09.957Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  joinDuplicateHeaders: undefined,\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 32,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T20:59:16.592Z","level":"error","message":"password is not defined","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-24T21:00:22.668Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-24T21:01:34.025Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-24T21:06:12.882Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-24T21:07:06.225Z","level":"error","message":"New password cannot be same as old password","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-24T21:08:27.471Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-09-25T07:59:07.052Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-25T23:32:47.993Z","level":"error","message":"Currrent Password Incorrect","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-25T23:33:13.745Z","level":"error","message":"Currrent Password Incorrect","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-25T23:39:27.041Z","level":"error","message":"Currrent Password Incorrect","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-25T23:39:53.779Z","level":"error","message":"Currrent Password Incorrect","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-25T23:40:00.958Z","level":"error","message":"Currrent Password Incorrect","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-25T23:40:28.052Z","level":"error","message":"Currrent Password Incorrect","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-25T23:41:19.337Z","level":"error","message":"Currrent Password Incorrect","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-25T23:41:47.316Z","level":"error","message":"Password must be 6 characters long","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-25T23:41:59.864Z","level":"error","message":"Currrent Password Incorrect","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-25T23:42:05.596Z","level":"error","message":"Currrent Password Incorrect","method":"POST","service":"user-service","url":"/password/update"}
{"date":"2023-09-25T23:53:15.719Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-26T00:04:03.608Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-26T00:41:58.311Z","level":"error","message":"Password must be 6 characters long","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-26T00:42:02.738Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-26T00:43:06.806Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-26T00:43:21.794Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-26T00:44:38.095Z","level":"error","message":"User already exists","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-26T00:44:44.319Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-26T00:53:42.119Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-26T00:54:05.025Z","level":"error","message":"user validation failed: role: `null` is not a valid enum value for path `role`.","method":"POST","service":"user-service","url":"/register"}
{"date":"2023-09-26T01:12:01.330Z","level":"error","message":"Cannot read properties of null (reading '_id')","method":"GET","service":"user-service","url":"/profile/get"}
{"date":"2023-10-02T22:37:05.288Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-10-02T22:37:05.328Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  joinDuplicateHeaders: undefined,\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 32,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-10-02T22:37:10.708Z","level":"error","message":"User does not exist","service":"user-service"}
{"date":"2023-10-02T22:37:10.723Z","level":"error","message":"Invalid status code: IncomingMessage {\n  _readableState: [ReadableState],\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: [Socket],\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [Array],\n  rawTrailers: [],\n  joinDuplicateHeaders: undefined,\n  aborted: false,\n  upgrade: false,\n  url: '/login',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: [Socket],\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/auth',\n  originalUrl: '/auth/login',\n  _parsedUrl: [Url],\n  params: {},\n  query: {},\n  res: [ServerResponse],\n  body: [Object],\n  _body: true,\n  length: undefined,\n  route: [Route],\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: [Object],\n  [Symbol(kHeadersCount)]: 32,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0\n}","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-10-02T22:38:03.255Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-10-02T22:38:08.166Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
{"date":"2023-10-03T00:36:18.057Z","level":"error","message":"Invalid credentials","method":"POST","service":"user-service","url":"/login"}
